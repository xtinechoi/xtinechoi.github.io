{"version":3,"sources":["Word.js","MyText.js","App.js","serviceWorker.js","index.js"],"names":["Word","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMouseEnterHandler","setState","hover","handleClick","e","parentFunc","state","react_default","a","createElement","Fragment","className","classNames","selected","isEverythingHighlighted","onMouseEnter","onClick","word","Component","mytext","App","logKey","keyCode","preventDefault","textBlocksArr","modifyPaste","data","clipboardData","getData","split","MyText","document","addEventListener","_this2","buildText","map","block","index","length","stringArr","key","src_Word_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAgCeA,qBA3Bb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,oBAAsB,WACpBP,EAAKQ,SAAS,CACZC,OAAO,KATST,EAapBU,YAAc,SAACC,GACbX,EAAKD,MAAMa,cAZXZ,EAAKa,MAAQ,CACXJ,OAAO,GAHST,wEAkBlB,OACEc,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,QAAME,UAAWC,IAAW,OAAQ,CAAEV,MAASN,KAAKU,MAAMJ,OAAS,CAACW,SAAYjB,KAAKJ,MAAMsB,0BAA2BC,aAAcnB,KAAKI,oBAAqBgB,QAASpB,KAAKO,aAAeP,KAAKJ,MAAMyB,MACtMV,EAAAC,EAAAC,cAAA,QAAME,UAAWC,IAAW,CAACC,SAAYjB,KAAKJ,MAAMsB,2BAA4B,aAtBrEI,cCMJC,EAVH,swGC0EGC,cApEb,SAAAA,EAAa5B,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IAClB3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,KAAMJ,KAaR6B,OAAS,SAACjB,GACU,IAAdA,EAAEkB,UACJlB,EAAEmB,iBACF9B,EAAKQ,SAAS,CACZuB,cAAe,GACfV,yBAAyB,MAnBXrB,EAwBpBgC,YAAc,SAACrB,GACb,IAAMsB,EAAOtB,EAAEuB,cAAcC,QAAQ,QACrCxB,EAAEmB,iBACF9B,EAAKQ,SAAS,CACZuB,cAAeE,EAAKG,MAAM,SA5BVpC,EAgCpBY,WAAa,WACXZ,EAAKQ,SAAS,CACZa,yBAA0BrB,EAAKa,MAAMQ,2BAhCvBgB,EAAOD,MAAM,MAFX,OAGlBpC,EAAKa,MAAQ,CACXkB,cAAeM,EAAOD,MAAM,MAC5Bf,yBAAyB,GALTrB,mFAUlBsC,SAASC,iBAAiB,QAASpC,KAAK6B,aACxCM,SAASC,iBAAiB,UAAWpC,KAAKyB,yCA2BnC,IAAAY,EAAArC,KACDsC,EACJtC,KAAKU,MAAMkB,cAAcW,IAAI,SAACC,EAAOC,GACnC,GAAID,EAAME,OAAS,EAAG,CACpB,IAAMC,EAAYH,EAAMP,MAAM,KAC9B,OACEtB,EAAAC,EAAAC,cAAA,OAAK+B,IAAKH,GACNE,EAAUJ,IAAI,SAAClB,EAAMoB,GACnB,OACE9B,EAAAC,EAAAC,cAACgC,EAAD,CAAMD,IAAKH,EAAOpB,KAAMA,EAAMZ,WAAY4B,EAAK5B,WAAYS,wBAAyBmB,EAAK3B,MAAMQ,6BAOzG,OACEP,EAAAC,EAAAC,cAAA,OAAK+B,IAAKH,GAAO9B,EAAAC,EAAAC,cAAA,cAKzB,OACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXuB,UA/DQhB,aCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASlB,SAASmB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8f44e339.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport './Word.css';\n\nclass Word extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      hover: false\n    }\n  }\n\n  onMouseEnterHandler = () => {\n    this.setState({\n      hover: true\n    });\n  }\n\n  handleClick = (e) => {\n    this.props.parentFunc();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <span className={classNames('word', { 'hover': this.state.hover }, {'selected': this.props.isEverythingHighlighted})} onMouseEnter={this.onMouseEnterHandler} onClick={this.handleClick}>{ this.props.word }</span>\n        <span className={classNames({'selected': this.props.isEverythingHighlighted})}>{' '}</span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Word;\n","const mytext = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n\nBoa Ipsum is a broad brushstrokes text-vanishing editor inspired by an extinct type of snake. \n\nReplace this text with your own: click anywhere to ‘highlight all’, then delete it and paste in whatever you want.\n\n\nConcepted by Christine Choi for a Biomimicry and Design graduate workshop led by Mara Holt Skov and Steven Skov Holt in 2009 at California College of the Arts, an early version of this project included a dense scientific prose paragraph about the Round Island Burrowing Boa that would scramble the words in your cursor’s path. Words that were moused over switched places with words you’d touched previously up to a certain number of times before becoming fixed; the idea was to make a poem that could replicate how curiosity-driven human movement can irreparably alter an ecosystem. As humans whose drive to explore and innovate technologically seems innate to our species, we spend lifetimes inventing engaging new platforms and capabilities for information circulation, whether it’s about news, pharmaceuticals, finances, video games, our pets, or our personal lives. We expanded limited print publishing channels by paving myriad ways to self-publish multiple forms of content instantly, globally, all day long, incessantly. But as we add to the noise, shouldn’t we also take responsibility for alleviating it? In the years since the first version of Boa Ipsum, Christine’s been making a living as a short form Copywriter on user experience teams where she takes verbose thickets of expository language from subject matter experts, engineers, marketers, or lawyers and reduces them to clear short phrases and navigation elements for 21st century attention spans. In 2015, Boa Ipsum was reimagined for the students of Denise Newman’s Off the Page undergraduate poetry workshop at CCA — all designers, painters, and multimedia artists with a pronounced passion for exploring the possibilities of working with text. This time, the idea was to create a more open-ended tool that provides a pleasing way to make swaths of text go away. In wake of a culture where the sheer volume of text on the screens we face each day increases exponentially, the work of the poet to create reprieve and write white space into something with intention and care holds new value. Thank you, generous developer friends who helped bring this site to light.`;\n\nexport default mytext ;","import React, { Component } from 'react';\nimport './App.css';\nimport Word from './Word';\nimport MyText from './MyText.js';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    const testArr = MyText.split('\\n');\n    this.state = {\n      textBlocksArr: MyText.split('\\n'),\n      isEverythingHighlighted: false\n    }\n  }\n\n  componentDidMount () {\n    document.addEventListener('paste', this.modifyPaste);\n    document.addEventListener('keydown', this.logKey);\n  }\n\n  logKey = (e) => {\n    if (e.keyCode === 8) {\n      e.preventDefault();\n      this.setState({\n        textBlocksArr: [],\n        isEverythingHighlighted: false\n      });\n    }\n  }\n\n  modifyPaste = (e) => {\n    const data = e.clipboardData.getData('text');\n    e.preventDefault();\n    this.setState({\n      textBlocksArr: data.split('\\n')\n    });\n  };\n\n  parentFunc = () => {\n    this.setState({\n      isEverythingHighlighted: !this.state.isEverythingHighlighted\n    });\n  }\n\n  render() {\n    const buildText = (\n      this.state.textBlocksArr.map((block, index) => {\n        if (block.length > 0) {\n          const stringArr = block.split(' ');\n          return (\n            <div key={index}>\n              { stringArr.map((word, index) => {\n                  return (\n                    <Word key={index} word={word} parentFunc={this.parentFunc} isEverythingHighlighted={this.state.isEverythingHighlighted} />\n                  );\n                })\n              }\n            </div>\n          );\n        } else {\n          return (\n            <div key={index}><br/></div>\n          );\n        }\n      })  \n    );\n    return (\n      <div className=\"App\">\n        { buildText }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}